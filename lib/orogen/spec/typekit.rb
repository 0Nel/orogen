module Orocos
    module Spec
        # Management of all the types in a project
        class Typekit
            # The typekit name
            attr_accessor :name
            # The typekit version string
            attr_accessor :version
            # The set of types registered in this typekit
	    attr_reader :registry
            # The set of typekits that have been imported in self
            attr_reader :imported_typekits

            def initialize(project = nil)
                @project = project
                @registry = Typelib::Registry.new
                @imported_typekits = Array.new
                Typelib::Registry.add_standard_cxx_types(registry)
            end

            def using_typekit(typekit)
                registry.merge(typekit.registry)
                imported_typekits << typekit
            end

            def find_opaque_for_intermediate(type)
                if opaque_name = type.metadata.get('orogen_intermediate_for').first
                    find_type(opaque_name, true)
                end
            end

            def find_intermediate_for_opaque(type)
                if name = type.metadata.get('orogen_intermediate_type').first
                    return find_type(name, true)
                end
            end

            def typelib_type_for(type)
                find_intermediate_for_opaque(type) || type
            end

            def intermediate_type?(type)
                !!find_opaque_for_intermediate(type)
            end

            def autogenerated_type?(type)
                !!type.metadata.get('orogen_autogenerated_type').first
            end

            def imported_typekits_for(type)
                type.metadata.get('orogen_typekits').map do |tk_name|
                    find_typekit_by_name(tk_name)
                end
            end

            def imported_type?(type)
                !type.metadata.get('orogen_typekits').include?(name)
            end

            def exported_type?(type)
                !type.metadata.get('orogen_exported_by').empty?
            end
        end
    end
end

