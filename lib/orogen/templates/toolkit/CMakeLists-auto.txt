# What does the toolkit need ?
#   - it needs RTT stuff
#   - it optionally needs CORBA support as well
#
# Corba-related generation: IDL, Corba-to-Orocos conversion code. This is done
# only if the user does not have disabled Corba support by calling
# #disable_corba
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${PROJECT_BINARY_DIR}/<%= Orocos::Generation::AUTOMATIC_AREA_NAME %>)

include_directories(${OrocosRTT_INCLUDE_DIRS})
add_definitions(${OrocosRTT_CFLAGS_OTHER})
link_directories(${OrocosRTT_LIBRARY_DIRS})

<% if toolkit.has_opaques_with_templates? %>
include_directories(${CMAKE_SOURCE_DIR}/toolkit)
<% end %>

# Now set up the dependencies
<%= toolkit_deps = toolkit.dependencies
    Generation.cmake_pkgconfig_require(toolkit_deps) %>

# Generate the base toolkit shared library
set(libname <%= component.name %>-toolkit-${OROCOS_TARGET})
add_library(${libname} SHARED <%= component.name %>Toolkit.cpp
    <% if !toolkit.opaques.empty? %>
    <% if toolkit.has_opaques_with_templates? %>
    ${PROJECT_SOURCE_DIR}/toolkit/<%= component.name %>ToolkitUser.cpp
    <% end %>
    <%= component.name %>ToolkitIntermediates.cpp
    <% end %>)

<%= Generation.cmake_pkgconfig_link_noncorba('${libname}', toolkit_deps) %>
target_link_libraries(${libname} LINK_INTERFACE_LIBRARIES ${OrocosRTT_LIBRARIES})

set(PKG_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/<%= component.name %>-toolkit-${OROCOS_TARGET}.pc)
configure_file(<%= component.name %>-toolkit.pc.in ${PKG_CONFIG_FILE} @ONLY)

install(TARGETS ${libname} LIBRARY DESTINATION lib/orocos)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>ToolkitTypes.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>Toolkit.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>ToolkitImpl.hpp
    <% if !toolkit.opaques.empty? %>
    <% if toolkit.has_opaques_with_templates? %>
    ${PROJECT_SOURCE_DIR}/toolkit/<%= component.name %>ToolkitUser.hpp
    <% end %>
    ${PROJECT_SOURCE_DIR}/<%= Generation::AUTOMATIC_AREA_NAME %>/toolkit/<%= component.name %>ToolkitIntermediates.hpp
    <% end %>
    DESTINATION include/orocos/toolkit)
install(FILES <%= toolkit.local_headers.join(" ") %>
    DESTINATION include/orocos/<%= component.name %>)
install(FILES ${PKG_CONFIG_FILE}
    DESTINATION lib/pkgconfig)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>.tlb
    ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>.typelist
    DESTINATION share/orogen)


<% if toolkit.corba_enabled? %>
include_directories(${OrocosCORBA_INCLUDE_DIRS})
add_definitions(${OrocosCORBA_CFLAGS_OTHER})
link_directories(${OrocosCORBA_LIBRARY_DIRS})

# Set up generation of IDL files for CORBA support
IF (NOT OrocosCORBA_Toolkit_FOUND)
    MESSAGE(FATAL_ERROR "could not find development files for Orocos/CORBA")
ENDIF(NOT OrocosCORBA_Toolkit_FOUND)

set(CORBA_FILES ${CMAKE_CURRENT_BINARY_DIR}/<%= component.name %>ToolkitC.cpp)
if(CORBA_IMPLEMENTATION STREQUAL "OMNIORB")
    list(APPEND CORBA_FILES ${CMAKE_CURRENT_BINARY_DIR}/<%= component.name %>ToolkitDynSK.cpp)
endif(CORBA_IMPLEMENTATION STREQUAL "OMNIORB")

add_custom_command(OUTPUT ${CORBA_FILES}
    COMMAND ${OrocosCORBA_IDL} -Wbkeep_inc_path
        <%= toolkit.used_toolkits.map { |tk| "-I" + File.join(tk.pkg.prefix, "include", "orocos") }.join(" ") %>
        ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>Toolkit.idl
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>Toolkit.idl)

add_definitions(${OrocosCORBA_Toolkit_DEFINES})
include_directories(BEFORE ${CMAKE_CURRENT_BINARY_DIR})
include_directories(${OrocosCORBA_Toolkit_INCLUDE_DIRS})

# Generate the CORBA transport
set(libname_corba <%= component.name %>-transport-corba-${OROCOS_TARGET})
add_library(${libname_corba} SHARED <%= component.name %>ToolkitCorba.cpp ${CORBA_FILES})
target_link_libraries(${libname_corba} ${libname} ${OrocosCORBA_LIBRARIES})
<%= Generation.cmake_pkgconfig_link_corba('${libname_corba}', toolkit_deps) %>
target_link_libraries(${libname_corba} LINK_INTERFACE_LIBRARIES ${OrocosCORBA_LIBRARIES})

SET(PKG_CONFIG_FILE_CORBA ${CMAKE_CURRENT_BINARY_DIR}/<%= component.name %>-transport-corba-${OROCOS_TARGET}.pc)
CONFIGURE_FILE(<%= component.name %>-transport-corba.pc.in ${PKG_CONFIG_FILE_CORBA} @ONLY)

install(TARGETS ${libname_corba} LIBRARY DESTINATION lib/orocos)
install(FILES ${PKG_CONFIG_FILE_CORBA} DESTINATION lib/pkgconfig)
install(FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>ToolkitCorba.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>ToolkitCorbaImpl.hpp
    ${CMAKE_CURRENT_BINARY_DIR}/<%= component.name %>ToolkitC.h
    ${CMAKE_CURRENT_SOURCE_DIR}/<%= component.name %>Toolkit.idl
    DESTINATION include/orocos/toolkit)
<% end %>

# Add a regeneration target
set(TK_STAMP "${CMAKE_CURRENT_SOURCE_DIR}/stamp")
add_custom_command(
    OUTPUT "${TK_STAMP}"
    DEPENDS <%= toolkit.loads.join(" ") %> <%= toolkit.external_loads.join(" ") %>
    COMMENT "Toolkit input changed, regenerating ..."
    WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
    COMMAND orogen <%= "--corba" if toolkit.corba_enabled? %> <%= toolkit.component.deffile %>
    COMMAND touch "${TK_STAMP}")
add_custom_target(regen-toolkit DEPENDS "${TK_STAMP}")
add_dependencies(${libname} regen-toolkit)

# Install type library files
