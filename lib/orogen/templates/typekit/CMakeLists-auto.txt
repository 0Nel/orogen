# What does the typekit need ?
#   - it needs RTT stuff
#   - it optionally needs CORBA support as well
#
# Corba-related generation: IDL, Corba-to-Orocos conversion code. This is done
# only if the user does not have disabled Corba support by calling
# #disable_corba
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${PROJECT_BINARY_DIR}/<%= Orocos::Generation::AUTOMATIC_AREA_NAME %>)
include_directories(${CMAKE_SOURCE_DIR}/<%= Orocos::Generation::AUTOMATIC_AREA_NAME %>)

include_directories(${OrocosRTT_INCLUDE_DIRS})
add_definitions(${OrocosRTT_CFLAGS_OTHER})
link_directories(${OrocosRTT_LIBRARY_DIRS})

<% if typekit.has_opaques_with_templates? %>
include_directories(${CMAKE_SOURCE_DIR}/typekit)
<% end %>

# Now set up the dependencies
<%= typekit_deps = typekit.dependencies
    Generation.cmake_pkgconfig_require(typekit_deps) %>
<%  typekit_deps.each do |dep_def|
        if dep_def.in_context?('core', 'include') %>
set(PKG_CFLAGS ${PKG_CFLAGS} ${<%= dep_def.var_name %>_CFLAGS})
        <% end %>
    <% end %>
string(REPLACE ";" "\" \"" PKG_CFLAGS "\"${PKG_CFLAGS}\"")

# Generate the base typekit shared library
set(libname <%= typekit.name %>-typekit-${OROCOS_TARGET})
add_library(${libname} SHARED
    <%= implementation_files.sort.join("\n  ") %>
    ${TOOLKIT_ADDITIONAL_SOURCES}
    <% if !typekit.opaques.empty? %>
        <% if typekit.has_opaques_with_templates? %>
            ${PROJECT_SOURCE_DIR}/typekit/<%= typekit.name %>TypekitUser.cpp
        <% end %>
        <%= typekit.name %>TypekitIntermediates.cpp
    <% end %>)

<%= Generation.cmake_pkgconfig_link_noncorba('${libname}', typekit_deps) %>
target_link_libraries(${libname} ${OrocosRTT_LIBRARIES} ${TOOLKIT_ADDITIONAL_LIBRARIES})
target_link_libraries(${libname} LINK_INTERFACE_LIBRARIES ${OrocosRTT_LIBRARIES})

set(PKG_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/<%= typekit.name %>-typekit-${OROCOS_TARGET}.pc)
configure_file(<%= typekit.name %>-typekit.pc.in ${PKG_CONFIG_FILE} @ONLY)

install(TARGETS ${libname} LIBRARY DESTINATION lib/orocos)
install(FILES
    <%= public_header_files.sort.join("\n    ") %>
    DESTINATION include/orocos/typekit)

<% typekit.local_headers(false).each do |path, dest_path| %>
install(FILES ${PROJECT_SOURCE_DIR}/<%= path %>
    DESTINATION include/orocos/<%= typekit.name %>/<%= File.dirname(dest_path) %>)
<% end %>
install(FILES ${PKG_CONFIG_FILE}
    DESTINATION lib/pkgconfig)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/<%= typekit.name %>.tlb
    ${CMAKE_CURRENT_SOURCE_DIR}/<%= typekit.name %>.typelist
    DESTINATION share/orogen)

<% typekit.each_plugin do |plg|
    if plg.separate_cmake? %>
    add_subdirectory(<%= plg.name %>)
    <% end
end %>
        

